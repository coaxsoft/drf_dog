{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DRF Dog Copy-paste utilities for Django REST Framework Documentation https://coaxsoft.github.io/drf_dog Source code https://github.com/coaxsoft/drf_dog Why copy-paste utilities? Often, it is mentally hard to install no name packages, especially, to commercial project, but it is easy to copy-paste the solution from stack overflow or github. For this reason, we try to keep this project the way that it can be easily installed from PyPi or just copy-pasted to your own code. Requirements Python 3.6+ Django 3.0+ Django REST Framework 3.11+ Installation Install the package using pip pip install drf_dog Overview Serializer Function Field Field you use when you want to prevent code duplication from drf_dog.serializers import SerializerFunctionField from my_project.utils import get_is_following is_following = SerializerFunctionField ( function = get_is_following ) Full docs License This project is licensed under the terms of the ISC License","title":"DRF Dog"},{"location":"#drf-dog","text":"Copy-paste utilities for Django REST Framework Documentation https://coaxsoft.github.io/drf_dog Source code https://github.com/coaxsoft/drf_dog Why copy-paste utilities? Often, it is mentally hard to install no name packages, especially, to commercial project, but it is easy to copy-paste the solution from stack overflow or github. For this reason, we try to keep this project the way that it can be easily installed from PyPi or just copy-pasted to your own code.","title":"DRF Dog"},{"location":"#requirements","text":"Python 3.6+ Django 3.0+ Django REST Framework 3.11+","title":"Requirements"},{"location":"#installation","text":"Install the package using pip pip install drf_dog","title":"Installation"},{"location":"#overview","text":"","title":"Overview"},{"location":"#serializer-function-field","text":"Field you use when you want to prevent code duplication from drf_dog.serializers import SerializerFunctionField from my_project.utils import get_is_following is_following = SerializerFunctionField ( function = get_is_following ) Full docs","title":"Serializer Function Field"},{"location":"#license","text":"This project is licensed under the terms of the ISC License","title":"License"},{"location":"release_notes/","text":"Release Notes 0.1.0 Features Add SerializerFunctionField Initialize the package and repository","title":"Release Notes"},{"location":"release_notes/#release-notes","text":"","title":"Release Notes"},{"location":"release_notes/#010","text":"","title":"0.1.0"},{"location":"release_notes/#features","text":"Add SerializerFunctionField Initialize the package and repository","title":"Features"},{"location":"serializers/","text":"Serializers Serializer Function Field SerializerFunctionField is very similar to SerializerMethodField . except you pass a function instead of a method to the field. You should use SerializerFunctionField when you have to include the same functionality in several serializers. Example Let's take a look to example when you need to return whether authenticated user follows the other user. Here is the comparison of code using method field and function field approaches SerializerFunctionField from rest_framework import serializers from drf_dog.serializers import SerializerFunctionField def get_is_following ( obj , context ): return obj . followers . filter ( pk = context [ 'request' ] . user . pk ) . exists () class UserSerializer ( serializers . ModelSerializer ): is_following = SerializerFunctionField ( function = get_is_following ) class Meta : model = User fields = ( 'id' , 'username' , 'is_following' ) SerializerMethodField from rest_framework import serializers class UserSerializer ( serializers . ModelSerializer ): is_following = serializers . SerializerMethodField () class Meta : model = User fields = ( 'id' , 'username' , 'is_following' ) def get_is_following ( self , obj ): return obj . followers . filter ( pk = self . context [ 'request' ] . user . pk ) . exists () This is very useful when you have several serializers relying on get_is_following . For example, from rest_framework import serializers from drf_dog.serializers import SerializerFunctionField from my_project.utils import get_is_following class AutocompleteUserSerializer ( serializers . ModelSerializer ): is_following = SerializerFunctionField ( function = get_is_following ) class Meta : model = User fields = ( 'id' , 'username' , 'is_following' ) class RetrieveUserSerializer ( serializers . ModelSerializer ): is_following = SerializerFunctionField ( function = get_is_following ) class Meta : model = User fields = ( 'id' , 'username' , 'email' , 'is_active' , 'avatar' , 'is_following' ) So, above is some sort of solution to code duplication .","title":"Serializers"},{"location":"serializers/#serializers","text":"","title":"Serializers"},{"location":"serializers/#serializer-function-field","text":"SerializerFunctionField is very similar to SerializerMethodField . except you pass a function instead of a method to the field. You should use SerializerFunctionField when you have to include the same functionality in several serializers.","title":"Serializer Function Field"},{"location":"serializers/#example","text":"Let's take a look to example when you need to return whether authenticated user follows the other user. Here is the comparison of code using method field and function field approaches SerializerFunctionField from rest_framework import serializers from drf_dog.serializers import SerializerFunctionField def get_is_following ( obj , context ): return obj . followers . filter ( pk = context [ 'request' ] . user . pk ) . exists () class UserSerializer ( serializers . ModelSerializer ): is_following = SerializerFunctionField ( function = get_is_following ) class Meta : model = User fields = ( 'id' , 'username' , 'is_following' ) SerializerMethodField from rest_framework import serializers class UserSerializer ( serializers . ModelSerializer ): is_following = serializers . SerializerMethodField () class Meta : model = User fields = ( 'id' , 'username' , 'is_following' ) def get_is_following ( self , obj ): return obj . followers . filter ( pk = self . context [ 'request' ] . user . pk ) . exists () This is very useful when you have several serializers relying on get_is_following . For example, from rest_framework import serializers from drf_dog.serializers import SerializerFunctionField from my_project.utils import get_is_following class AutocompleteUserSerializer ( serializers . ModelSerializer ): is_following = SerializerFunctionField ( function = get_is_following ) class Meta : model = User fields = ( 'id' , 'username' , 'is_following' ) class RetrieveUserSerializer ( serializers . ModelSerializer ): is_following = SerializerFunctionField ( function = get_is_following ) class Meta : model = User fields = ( 'id' , 'username' , 'email' , 'is_active' , 'avatar' , 'is_following' ) So, above is some sort of solution to code duplication .","title":"Example"}]}